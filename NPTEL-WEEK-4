1.b
2.b
3.3
4.2
5.c
6.c
7.45
8.a



def capture_surrounded_stones(board):
    if not board:
        return 0
    
    m, n = len(board), len(board[0])
    
    def dfs(x, y):
        if x < 0 or x >= m or y < 0 or y >= n or board[x][y] != 'O':
            return
        board[x][y] = 'E'  # Mark as escaped
        dfs(x+1, y)
        dfs(x-1, y)
        dfs(x, y+1)
        dfs(x, y-1)
    
    # Mark all 'O's on the edge and connected to the edge as 'E'
    for i in range(m):
        if board[i][0] == 'O':
            dfs(i, 0)
        if board[i][n-1] == 'O':
            dfs(i, n-1)
    
    for j in range(n):
        if board[0][j] == 'O':
            dfs(0, j)
        if board[m-1][j] == 'O':
            dfs(m-1, j)
    
    # Capture all surrounded 'O's and count remaining 'O's
    remaining_O = 0
    for i in range(m):
        for j in range(n):
            if board[i][j] == 'O':
                board[i][j] = 'X'
            elif board[i][j] == 'E':
                board[i][j] = 'O'
                remaining_O += 1
                
    return remaining_O


def main():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    index = 0
    t = int(data[index])
    index += 1
    
    results = []
    for _ in range(t):
        m = int(data[index])
        n = int(data[index + 1])
        index += 2
        
        board = []
        for i in range(m):
            board.append(list(data[index + i]))
        index += m
        
        result = capture_surrounded_stones(board)
        results.append(result)
    
    for result in results:
        print(result)


if __name__ == "__main__":
    main()








def min_swaps_to_unite_twins(n, starArray):
    twin_pairs = {i // 2: (2 * (i // 2), 2 * (i // 2) + 1) for i in range(2 * n)}
    index_map = {star: idx for idx, star in enumerate(starArray)}
    swaps = 0

    for i in range(0, 2 * n, 2):
        twin_1, twin_2 = twin_pairs[starArray[i] // 2]
        if starArray[i + 1] == twin_2:
            continue

        target_idx = index_map[twin_2]
        starArray[i + 1], starArray[target_idx] = starArray[target_idx], starArray[i + 1]
        index_map[starArray[target_idx]] = target_idx
        index_map[starArray[i + 1]] = i + 1
        swaps += 1

    return swaps


def main():
    import sys
    input = sys.stdin.read
    data = input().split()

    index = 0
    t = int(data[index])
    index += 1

    results = []
    for _ in range(t):
        n = int(data[index]) // 2
        index += 1
        starArray = list(map(int, data[index:index + 2 * n]))
        index += 2 * n

        result = min_swaps_to_unite_twins(n, starArray)
        results.append(result)

    for result in results:
        print(result)


if __name__ == "__main__":
    main()


