1.3,4
2.1308
3.1,5
4.6
5.2
6.3
7.6
8.3
9.1
10.52

------------------------------------------------------------------------------------
1//

import sys
import heapq
import math

def compute_probability(X1, X2, X3, beta):
    beta0, beta1, beta2, beta3 = beta
    # Using the logistic function to compute probability
    return 1 / (1 + math.exp(- (beta0 + beta1 * X1 + beta2 * X2 + beta3 * X3)))

def minimum_spanning_tree(n, edges):
    # Create an adjacency list for the graph
    graph = [[] for _ in range(n + 1)]
    
    for u, v, weight in edges:
        graph[u].append((weight, v))
        graph[v].append((weight, u))

    total_weight = 0
    visited = [False] * (n + 1)
    min_heap = [(0, 1)]  # (weight, node)
    
    edge_count = 0
    
    while min_heap and edge_count < n:
        weight, u = heapq.heappop(min_heap)
        
        if visited[u]:
            continue
        
        visited[u] = True
        total_weight += weight
        edge_count += 1
        
        for edge_weight, v in graph[u]:
            if not visited[v]:
                heapq.heappush(min_heap, (edge_weight, v))

    if edge_count != n:
        return -1  # Not all proteins are connected

    return total_weight

def main():
    input = sys.stdin.read
    data = input().splitlines()
    
    t = int(data[0])
    idx = 1
    results = []
    
    for _ in range(t):
        n, m, *beta = data[idx].split()
        n = int(n)
        m = int(m)
        
        beta = list(map(float, beta))
        edges = []

        for j in range(m):
            u, v, X1, X2, X3 = data[idx + 1 + j].split()
            u = int(u)
            v = int(v)
            X1 = int(X1)
            X2 = float(X2)
            X3 = float(X3)

            # Compute the probability p(u, v)
            p_uv = compute_probability(X1, X2, X3, beta)
            # Assign weight based on the negative log probability
            weight = -math.log(p_uv)
            edges.append((u, v, weight))

        # Compute the minimum spanning tree weight
        minimum_weight = minimum_spanning_tree(n, edges)
        results.append(f"{minimum_weight:.3f}" if minimum_weight != -1 else "-1")

        idx += m + 1

    print("\n".join(results))

if __name__ == "__main__":
    main()

----------------------------------------------------------------------------------------
2//

import sys
import heapq

# Function to find the representative of a set
def find(parent, i):
    if parent[i] != i:
        parent[i] = find(parent, parent[i])
    return parent[i]

# Function to union two sets
def union(parent, rank, x, y):
    root_x = find(parent, x)
    root_y = find(parent, y)
    
    if root_x != root_y:
        if rank[root_x] > rank[root_y]:
            parent[root_y] = root_x
        elif rank[root_x] < rank[root_y]:
            parent[root_x] = root_y
        else:
            parent[root_y] = root_x
            rank[root_x] += 1

# Function to compute the Manhattan distance
def manhattan_distance(p1, p2):
    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])

# Function to compute the Minimum Spanning Tree using Kruskal's algorithm
def minimum_spanning_tree(N, points):
    edges = []
    for i in range(N):
        for j in range(i + 1, N):
            cost = manhattan_distance(points[i], points[j])
            edges.append((cost, i, j))
    
    edges.sort()
    parent = list(range(N))
    rank = [0] * N
    total_cost = 0
    num_edges = 0
    
    for cost, u, v in edges:
        if find(parent, u) != find(parent, v):
            union(parent, rank, u, v)
            total_cost += cost
            num_edges += 1
            if num_edges == N - 1:
                break
    
    return total_cost

# Main function to read input and solve the problem
def main():
    input = sys.stdin.read
    data = input().split()
    
    index = 0
    t = int(data[index])
    index += 1
    results = []
    
    for _ in range(t):
        N = int(data[index])
        index += 1
        points = []
        for i in range(N):
            x = int(data[index])
            y = int(data[index + 1])
            points.append((x, y))
            index += 2
        
        result = minimum_spanning_tree(N, points)
        results.append(result)
    
    for result in results:
        print(result)

if __name__ == "__main__":
    main()

