[23bcs099@mepcolinux ex4]$cat heap.c
#include <stdio.h>
#include <stdlib.h>
void swap(int *a, int *b)
{
        int temp = *a;
        *a = *b;
        *b = temp;
}

void heapify(int arr[], int n, int i)
{
        int largest = i;  // Initialize largest as root
        int left = 2 * i + 1;  // left = 2*i + 1
        int right = 2 * i + 2;  // right = 2*i + 2

        if (left < n && arr[left] > arr[largest])
                largest = left;

        if (right < n && arr[right] > arr[largest])
                largest = right;

        if (largest != i)
        {
                swap(&arr[i], &arr[largest]);
                heapify(arr, n, largest);
        }
}

void heapSort(int arr[], int n)
{
        int i;
        for (i=(n/2)-1;i>=0;i--)
                heapify(arr, n, i);
        for (i=n-1;i>0;i--)
        {
                swap(&arr[0], &arr[i]);
                heapify(arr, i, 0);
        }
}

void printArray(int arr[], int n)
{
        int i;
        for (i = 0; i < n; ++i)
                printf("%d ", arr[i]);
        printf("\n");
}

int main()
{
        int *arr;
        int n;
        printf("\nHEAP SORT\n---- ----\n\n");
        printf("Enter size of array:");
        scanf("%d",&n);
        arr=(int*)malloc(n*sizeof(int));
        int i;
        printf("\n");
        for(i=0;i<n;i++)
        {
                printf("Enter element %d :",i+1);
                scanf("%d",&arr[i]);
        }
        printf("\nResult of the given array :\n------ -- --- ----- -----\n");
        printf("\nGiven array is \n");
        printArray(arr, n);
        heapSort(arr, n);
        printf("\nSorted array is \n");
        printArray(arr, n);
        return 0;
}

==================================================================================================================================================================================================================================

[23bcs099@mepcolinux ex4]$cat insertion_sort.c
#include <stdio.h>
#include <stdlib.h>

void insertionSort(int arr[], int n)
{
        int i;
        for (i = 1; i < n; i++)
        {
                int key = arr[i];
                int j = i - 1;
                while (j >= 0 && arr[j] > key)
                {
                        arr[j + 1] = arr[j];
                        j = j - 1;
                }
                arr[j + 1] = key;
        }
}

void printArray(int arr[], int n)
{
        int i;
        for (i = 0; i < n; i++)
                printf("%d ", arr[i]);
        printf("\n");
}

int main()
{
        int *arr;
        int n;
        printf("\nINSERTION SORT\n--------- ----\n\n");
        printf("Enter size of array:");
        scanf("%d",&n);
        arr=(int*)malloc(n*sizeof(int));
        int i;
        printf("\n");
        for(i=0;i<n;i++)
        {
                printf("Enter element %d :",i+1);
                scanf("%d",&arr[i]);
        }
        printf("\nResult of the given array :\n------ -- --- ----- -----\n");
        printf("\nGiven array is \n");
        printArray(arr, n);
        insertionSort(arr, n);
        printf("\nSorted array is \n");
        printArray(arr, n);
        return 0;
}
